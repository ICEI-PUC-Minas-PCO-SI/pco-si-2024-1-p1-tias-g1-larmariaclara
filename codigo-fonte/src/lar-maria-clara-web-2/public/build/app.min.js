

window.AUTH = 'UNSERVICE'

async function Auth(){
	var token = getToken()
	return
    var pathname = location.pathname
	if(!token){
		return !pathname.includes('/login') ? to('/login') : null
	}

	var { error } = await mr('/auth/check')
	if(error){
		return !pathname.includes('/login') ? to('/login') : null
	}

	pit('#app').show()

	var token = UserObtain()
	UserView(token)
}

async function AuthLogin(){
	var { error } = await mr('/auth/login')
	if(error) return

	to('/')
}

function AuthQuit(){
	storage.set('token', '')
	to('/login')
}

async function Categorias(items){
    if(!items){
        items = await mr('/res/read', 'categorias')
    }

    session.setJson('items', items)

    /* COM TABLEAS */
    var table = new Table()

    for (let i = 0; i < items.length; i++) {
        var m = items[i];
        table.addRow([
            `<input type="checkbox" data-id="${m.id}" json-id="${i}" json-hash="${m.updated_hash}" line-id="${i + 1}">`,
            m.categoria, 
        ])

        // -
    }
}



async function Contas(items){
    if(!items){
        items = await mr('/res/read', 'users')
    }

    var table = new Table()
    session.setJson('items', items)

    for (let i = 0; i < items.length; i++) {
        var m = items[i];
        table.addRow([
            `<input type="checkbox" data-id="${m.id}" json-id="${i}" json-hash="${m.updated_hash}" line-id="${i + 1}">`,
            m.nome, 
            brData(m.created_at),
            m.tipo,
        ])

        // -
    }
}

async function Contasbancarias(items){
    if(!items){
        items = await mr('/res/read', 'moradores')
    }

    session.setJson('items', items)

    /* COM TABLEAS */
    var table = new Table()
    for (let i = 0; i < items.length; i++) {
        var m = items[i];
        table.addRow([
            `<input type="checkbox" data-id="${m.id}" json-id="${i}" json-hash="${m.updated_hash}" line-id="${i + 1}">`,
            m.conta, 
            m.agencia, 
            m.banco
        ])

        // -
    }
}



async function Curadores(items){
    if(!items){
        items = await mr('/res/read', 'moradores')
    }

    session.setJson('items', items)

    /* COM TABLEAS */
    var table = new Table()

    for (let i = 0; i < items.length; i++) {
        var m = items[i];
        table.addRow([
            `<input type="checkbox" data-id="${m.id}" json-id="${i}" json-hash="${m.updated_hash}" line-id="${i + 1}">`,
            m.nomecurador, 
            m.telefonecurador
        ])

        // -
    }
}



async function Home(){

}

function updateit(prefix){
    var update = null
    var checkboxes = pit('input[type="checkbox"]').all()

    for (let i = 1; i < checkboxes.length; i++) {
        var checkboxe = checkboxes[i];
        if(checkboxe.checked == true){
            update = checkboxe
            break
        }
    }

    if(!update){
        return OpenSm('Você deve selecionar um item', 'error')
    }


    items = session.getJson('items')
    var id = parseInt(checkboxe.attr('json-id'))

    var item = items[id]
    PrepareItems(item, prefix)

    Next('#ITEM_NEW', '#ITEM_APP')
}

function removeit(tableName){
    var checkboxes = pit('input[type="checkbox"]').all()
    var removeArray = []

    for (let i = 1; i < checkboxes.length; i++) {
        var checkboxe = checkboxes[i];
        if(checkboxe.checked == true){
            removeArray.push(checkboxe.attr('json-hash'))
        }
    }
    
    mr_delete('/res/delete', tableName, removeArray)
}

function MenuApp(){
    var viewmenu = location.pathname.replace(/\//g, '');
    viewmenu = concat('#', viewmenu)
    if(compare(viewmenu, '#')) {
        viewmenu = "#home"
    }

    pit(viewmenu).addClass('active')
}



async function Moradores(moradores){
    if(!moradores){
        moradores = await mr('/res/read', 'moradores')
    }
 
    var table = new Table()
    session.setJson('moradores', moradores)
    for (let i = 0; i < moradores.length; i++) {
        var m = moradores[i];
        table.addRow([
            `<input type="checkbox" data-id="${m.id}" json-id="${i}" json-hash="${m.updated_hash}" line-id="${i + 1}">`,
            m.nome, 
            brData(m.created_at),
            m.nomecurador,
            '47'
        ])

        // -
    }
}



async function Movimentacoes(items){
    if(!items){
        items = await mr('/res/read', 'tableName')
    }

    session.setJson('items', items)

    /* COM TABLEAS */
    var table = new Table()

    for (let i = 0; i < items.length; i++) {
        var m = items[i];
        table.addRow([
            `<input type="checkbox" data-id="${m.id}" json-id="${i}" json-hash="${m.updated_hash}" line-id="${i + 1}">`,
            m.nome, 
            brData(m.created_at),
            m.tipo,
        ])

        // -
    }
}



async function removeIt(){
    var inputs = pit('input[type="checkbox"]').all()
    var removeLines = []
    var removeArray = []
  
    for (let i = 0; i < inputs.length; i++) {
        var input = inputs[i];
        if(input.attr('data-id')){
            removeArray.push('data-id')
            removeLines.push('line-id')
        }
    }

    var table = Table()
    table.removeRows(removeLines)

    // mr
}   

function UserView(token){
    pit('.userName').text(token.nome)
    pit('.userEmail').text(token.email)
    pit('.userType').text(token.tipo)
    pit('.userImage').attr('src', token.foto)
}



function randStr(len) {
    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let str = '';

    for (let i = 0; i < len; i++) {
        const randIdx = Math.floor(Math.random() * chars.length);
        str += chars.charAt(randIdx);
    }

    return str;
  }

function randEmail() {
    const username = randStr(8);
    const domain = randStr(5) + '.com';
    return `${username}@${domain}`;
}

function randFutureDate() {
    const currentDate = new Date();
    const futureDate = new Date(currentDate.getTime() + Math.floor(Math.random() * 7) * 24 * 60 * 60 * 1000);
    const year = futureDate.getFullYear();
    const month = (futureDate.getMonth() + 1).toString().padStart(2, '0');
    const day = futureDate.getDate().toString().padStart(2, '0');
    return `${year}-${month}-${day}`;
}

function processInputs() {
    const inputs = document.querySelectorAll('input, select');
    inputs.forEach((input) => {
        if (input.type === 'text') {
            input.value = randStr(8);
        } else if (input.type === 'email') {
            input.value = randEmail();
        } else if (input.type === 'date') {
            input.value = randFutureDate();
        } else if (input.type === 'select-one') {
            const options = input.options;
            const randIdx = Math.floor(Math.random() * options.length);
            input.selectedIndex = randIdx;
        }
    });
}

function com(m){
    console.log(m)
}



function Callback(){
    var callbaks = pit('[callback]').all();

    for (let i = 0; i < callbaks.length; i++) {
        var callback = callbaks[i]
        eval(callback.getAttribute('callback'))
    }
}



// --

function parseDate(numero) {
    return numero < 10 ? '0' + numero : numero;
}

function brData(dataISO) {
    var data = new Date(dataISO); 

    var dia = parseDate(data.getDate()); 
    var mes = parseDate(data.getMonth() + 1); 
    var ano = data.getFullYear(); 

    var dataFormatada = `${dia}/${mes}/${ano}`;
    return dataFormatada;
}


function define(rule, propiet, sufix = 'px'){
    var elements = document.querySelectorAll(`[class*="${rule}"]`);
    elements.forEach(element => {
        var classes = element.className.split(' ');
        var mtClass = classes.find(className => className.startsWith(rule));

        if (mtClass) {
            var number = mtClass.slice(2);
            !isNaN(number) ? element.style[propiet] = number + sufix : null
        }

        // --
    })
}


Element.prototype.addClass = function(...array) {
    for (let i = 0; i < array.length; i++) {
        var item = array[i]
        this.classList.add(item);
    }
}

Element.prototype.removeClass = function(...array) {
   for (let i = 0; i < array.length; i++) {
       var item = array[i]
       this.classList.remove(item);
   }
}

Element.prototype.hasClass = function(className) {
   return this.classList.contains(className);
}

Element.prototype.attr = function(index, value = '') {
   if(value){
       return this.setAttribute(index, value)
   }

   return this.getAttribute(index);
}

Element.prototype.html = function(value = '') {
   if(value){
       return this.innerHTML
   }

   return this.innerHTML
}

function DropMenu(id, e){ 
    var dropContent = e.closest('.drop-content') // pega o dorp menu que eta

    document.addEventListener('click', function(event) {
        if (!dropContent.contains(event.target)) {
            return pit(id).close()
        }

        pit(id).show()
    })
}



function error2Forms(){
    return {
        error: document.querySelectorAll('form').length > 1,
        message: 'Você tem dois formularios'
    }
}

function errorDuplicateForms(){
    var formElements = document.querySelectorAll('input, select, textarea');
    var fieldNames = new Map();
    var duplicates = [];

    formElements.forEach(element => {
        if (element.name) {
            var fieldName = element.name.toLowerCase();

            if (fieldNames.has(fieldName)) {
                duplicates.push(fieldName);
            } else {
                fieldNames.set(fieldName, true);
            }
        }
    });

    return {
        error: duplicates.length > 0,
        message: 'Você tem inputs com name duplicado: ' + duplicates.join(' e ')
    }
}

function DebugErrors(prefix) {
    Object.keys(window).filter(function(name){
        if(name.startsWith(prefix)){
            var probe = window[name];
            if (typeof probe === 'function') {
                var { error, message } = probe();
                error ? alert(message) : null
            }

        }

        // --
    })
}


function photoView(e) {

    var input = e.target;
    var reader = new FileReader();
    reader.onload = function(e) {
        var id = input.getAttribute('data-id');
        var img = document.getElementById(id);

        console.log(img);
        img.src = e.target.result;
        img.style.display = 'block';
    };

    reader.readAsDataURL(input.files[0]);
}



function inputsFromObject(obj, prefix) {
    const inputs = document.querySelectorAll('input, textarea, select');

    for (const key in obj) {
        const inputName = `${prefix}${capitalize(key)}`;
        const inputElement = Array.from(inputs).find(input => input.name === inputName && input.type != 'file');

        if (inputElement) {
            inputElement.value = obj[key];
        }

        // --
    }
}


function beforeInstall(event){
    var install = pit('#INSTALLAPP');
    install.removeClass('h')
    if(install){
        install.on('click', function() {
            event.prompt();
        })
    }
}


function Next(open, close, managerClass){
	pit(open).show()
	pit(close).close()

    if(managerClass){
        pit('.manager-item').close() 
        pit(managerClass).show() 
    }
}

function getID(elemento) {
    var parent = elemento.parentElement;

    while (parent) {
        if (parent.id) return '#' + parent.id
        parent = parent.parentElement;
    }

    return null
}

async function ViewItems(url, prefix, payload){
    var items = Array.isArray(url) ? url : await mr(url)
    if(items.error){
        return
    }

    var html = [];
    for (let i = 0; i < items.length; i++) {
        var item = items[i];
        var ITEM_CREATE = cap('#ITEM_CREATE').html();

        for (let j = 0; j < payload.length; j++) {
            var { regex, key } = payload[j];
            ITEM_CREATE = ITEM_CREATE.replace(regex, item[key]);
        }

        if(compare('active', item.status)){
            ITEM_CREATE = ITEM_CREATE.replace(/ITEM_STATUS/g, 'ATIVO');
            ITEM_CREATE = ITEM_CREATE.replace(/ITEM_CLASS_STATUS/g, 'active');
        }else if(compare('unnative', item.status)){
            ITEM_CREATE = ITEM_CREATE.replace(/ITEM_STATUS/g, 'INATIVO');
            ITEM_CREATE = ITEM_CREATE.replace(/ITEM_CLASS_STATUS/g, 'unactive');
        }else{
            ITEM_CREATE = ITEM_CREATE.replace(/ITEM_STATUS/g, 'PENDENTE');
            ITEM_CREATE = ITEM_CREATE.replace(/ITEM_CLASS_STATUS/g, 'pedding');
        }

        ITEM_CREATE = ITEM_CREATE.replace(/BS64/g, b64_encode(item));
        ITEM_CREATE = ITEM_CREATE.replace(/PREFIX/g, prefix);

        html.push(ITEM_CREATE);
    }

    cap('#ITEM_GAIN').html(html.join(''));
}

function PrepareItems(items, prefix){
    inputsFromObject(items, prefix);

    Next('#ITEM_NEW', '#ITEM_APP', '.update-item')
}



function toJson(json){
    return JSON.parse(json)
}

function fromJson(json){
    return JSON.stringify(json)
}


window.sw = null
window.production = location.protocol.includes('https') ? true : false;
window.addEventListener('load', function(){    
    define('mt', 'marginTop')
    define('hd', 'height')
    define('ml', 'marginLeft')
    define('mr', 'marginRight')
    define('mb', 'marginBottom')
    define('wd', 'width', '%')
    define('wp', 'width', 'px')
    define('he', 'width', 'px')
    define('hp', 'width', '%')
    define('br', 'borderRadius', 'px')
    define('bp', 'borderRadius', '%')
    define('pd', 'padding')
    define('pl', 'paddingLeft')
    define('pt', 'paddingTop')
    define('pb', 'paddingBottom')
    define('pr', 'paddingRight')
    define('fs', 'fontSize', 'em')
    define('tr', 'transition', 's')
    define('ls', 'letterSpacing', 'px')

    Callback()
    processInputs()

    MaskGeneral(
        { search: 'cpf', maxlength: 14, placeholder: '000.000.000-00', oninput: CPFMask },
        { search: 'data', maxlength: 10, placeholder: '00/00/0000', oninput: MaskDate },
        { search: 'telefone', maxlength: 15, placeholder: '(00) 00000-0000', oninput: PhoneMask },
        { search: 'rg', maxlength: 12, placeholder: '00.000.000-0', oninput: RGMask },
        { search: 'cnpj', maxlength: 18, placeholder: '00.000.000/0000-00', oninput: CNPJMask },
    )

    if(!production){
        DebugErrors('error')
    }
})



function MaskGeneral(...configs){
    // search, maxlength, placeholder, oninput
    var ps = document.querySelectorAll('p');

    configs.forEach(function(config) {
        var { search, maxlength, placeholder, oninput } = config;

        for (let i = 0; i < ps.length; i++) {
            var p = ps[i];
            var pContent = p.textContent.toLowerCase();
            if (!pContent.includes(search.toLowerCase())) {
                continue;
            }

            var input = p.nextElementSibling;
            if (!input || input.tagName != 'INPUT') {
                continue
            }

            input.maxLength = maxlength;
            input.placeholder = placeholder;
            input.oninput = function() { oninput(input) };
        }

        // -
    })
}

function MaskDate(e){
    var m = e.value
    if(m.length == 2){
        e.value += '/'
    }

    if(m.length == 5){
        e.value += '/'
    }
}

function CPFMask(e){
    var value = e.value.replace(/\D/g, '');

    if (value.length > 0) {
        if (value.length > 3) {
            value = value.substring(0, 3) + '.' + value.substring(3);
        }
        if (value.length > 7) {
            value = value.substring(0, 7) + '.' + value.substring(7);
        }
        if (value.length > 11) {
            value = value.substring(0, 11) + '-' + value.substring(11, 13);
        }
    }

    e.value = value;
}

function PhoneMask(input) {
    var value = input.value
    if (!value) return ""
    value = value.replace(/\D/g,'')
    value = value.replace(/(\d{2})(\d)/,"($1) $2")
    value = value.replace(/(\d)(\d{4})$/,"$1-$2")
    input.value = value
}

function CNPJMask(input){
    let valor = input.value.replace(/\D/g, '');
    let formatado = '';

    if (valor.length > 0) {
        formatado = `${valor.substring(0, 2)}`;
    }
    if (valor.length > 2) {
        formatado += `.${valor.substring(2, 5)}`;
    }
    if (valor.length > 5) {
        formatado += `.${valor.substring(5, 8)}`;
    }
    if (valor.length > 8) {
        formatado += `/${valor.substring(8, 12)}`;
    }
    if (valor.length > 12) {
        formatado += `-${valor.substring(12, 14)}`;
    }

    input.value = formatado;
}

function RGMask(e) {
    var value = e.value.replace(/\D/g, '');

    if (value.length > 0) {
        if (value.length > 2) {
            value = value.substring(0, 2) + '.' + value.substring(2);
        }
        if (value.length > 6) {
            value = value.substring(0, 6) + '.' + value.substring(6); 
        }
        if (value.length > 10) {
            value = value.substring(0, 10) + '-' + value.substring(10, 11); 
        }
    }

    e.value = value;
}

function ModalOpen(modal){
	pit('#MODALBOX').addClass('modal')
	pit(modal).show()
}

function ModalClose(){
	pit('.modal-content').close()
	pit('#MODALBOX').removeClass('modal')
}


function minhaIdade(dataNascimento) {
    var partes = dataNascimento.split('/');
    var dia = parseInt(partes[0], 10);
    var mes = parseInt(partes[1], 10) - 1; 
    var ano = parseInt(partes[2], 10);

    var dataNasc = new Date(ano, mes, dia);

    var hoje = new Date();
    var idade = hoje.getFullYear() - dataNasc.getFullYear();

    var mesAtual = hoje.getMonth();
    var diaAtual = hoje.getDate();

    if (mesAtual < mes || (mesAtual === mes && diaAtual < dia)) {
        idade--;
    }

    return idade;
}



class Pity{
    constructor(query){
        this.els = document.querySelectorAll(query)
    }

    all(){
        return this.els
    }

    text(t){
        var els = this.els
        els.forEach(function(el){
            el.textContent = t
        })
    }

    value(value){
        if(value){
            this.els[0].value = value
        }else{
            return this.els[0].value 
        }
    }

    attr(index, value){
        if(value){
            this.els[0].setAttribute(index, value)
        }else{
            return this.els[0].getAttribute(index)
        }
    }

    get(){
        return this.els[0]
    }

    css(index, value){
        var els = this.els
        for (let i = 0; i < els.length; i++) {
            var el = els[i];
            el.style[index] = value
        }
    }

    on(event, callback){
        var els = this.els
        for (let i = 0; i < els.length; i++) {
            var el = els[i];
            el.addEventListener(event, callback)
        }
    }

    show(){
        var els = this.els
        for (let i = 0; i < els.length; i++) {
            var el = els[i];
            el.removeClass('h')
        }
    }

    close(){
        var els = this.els
        for (let i = 0; i < els.length; i++) {
            var el = els[i];
            el.addClass('h')
        }
    }

    addClass(className){
        var els = this.els
        for (let i = 0; i < els.length; i++) {
            var el = els[i];
            el.addClass(className)
        }
    }

    removeClass(className){
        var els = this.els
        for (let i = 0; i < els.length; i++) {
            var el = els[i];
            el.removeClass(className)
        }
    }

    html(content){
        var els = this.els
        for (let i = 0; i < els.length; i++) {
            var el = els[i];
            el.innerHTML = content
        }
    }
}

function setByName(name, value){
    pit(`input[name="${name}"]`).value(value)
}

function pit(query){
    var p = new Pity(query)
    return p
}


function newForm(){
    var form = pit('#form').get()
    var formData = new FormData(form)

    return formData;
}

function Request(){

}

Request.prototype.success = function(response, inputs){
    OpenSm(response.success, 'success')
    for (let i = 0; i < inputs.length; i++) {
        var input = inputs[i]
        if(!['hidden', 'date'].includes(input.type) && !input.attr('no-update')){
            inputs[i].value = ''
        }
    }    
}

Request.prototype.error = function(response, inputs){
    OpenSm(response.error, 'error')
    for (let i = 0; i < inputs.length; i++) {
        var input = inputs[i]
        if(!input.value) {
            input.classList.add('input-error')
            input.addEventListener('click', function(){
                this.classList.remove('input-error')
            })
        }
    }    
}

Request.prototype.post = async function(url, headers){
    var formData = newForm()
    var inputs = pit('input').all();

    console.log(Object.assign(
        {}, getHead(), 
        headers
    ))
    var request = await fetch(url, {
        method: 'POST',
        headers: Object.assign(
            {}, getHead(), 
            headers
        ),
        body: formData
    })

    var response = await request.json()

    response.success ? this.success(response, inputs) : null
    response.error ? this.error(response, inputs) : null
    response.token ? storage.set('token', response.token) : null

    return response
}

async function mr(url, tableName){
    var request = new Request()

    var response = await request.post(url, {
        'x-table': tableName
    })

    return response
}

async function mr_delete(url, tableName, removeArray){
    var request = new Request()

    var response = await request.post(url, {
        'x-table': tableName,
        'x-array': fromJson(removeArray)
    })

    return response
}

async function mr_search(url, tableName, search, callback){
    var request = new Request()

    var response = await request.post(url, {
        'x-table': tableName,
        'x-search': search
    })

    callback(response)
}

function phoneRule(string){
    return /^\(\d{2}\) \d{5}-\d{4}$/.test(string)
}

function emailRule(string){
    return /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(string);
}


function Session(){
    this.session = sessionStorage
}

Session.prototype.get = function(index){
    return this.session.getItem(index)
}

Session.prototype.set = function(index, value){
    return this.session.setItem(index, value)
}

Session.prototype.getJson = function(index){
    return toJson(this.session.getItem(index))
}

Session.prototype.setJson = function(index, value){
    return this.session.setItem(index, fromJson(value))
}

window.session = new Session()



var message_id = '#SYSTEM_MESSAGE'
function CloseSm(){
	pit(message_id).css('zIndex', 0)

	var sm = pit(message_id)

	sm.close();
	sm.removeClass('success');
	sm.removeClass('error');
}

function OpenSm(message, className){
	pit(message_id).css('zIndex', 0)

	var sm = pit(message_id)

	sm.show();
	sm.addClass(className);

	var img = pit(message_id + ' img')

	compare(className, 'success') ? img.attr('src', '/success.png') : img.attr('src', '/error.png')

    pit(message_id + ' p').html(message);

    setTimeout(CloseSm, 1000);
    pit(message_id + ' .icon-close').on('click', CloseSm)
}




function Storage(){
    this.storage = localStorage
}

Storage.prototype.get = function(index){
    return this.storage.getItem(index)
}

Storage.prototype.set = function(index, value){
    this.storage.setItem(index, value)
}

Storage.prototype.getJson = function(index){
    return JSON.parse(this.storage.getItem(index))
}

Storage.prototype.setJson = function(index, value){
    this.storage.setItem(index, JSON.stringify(value))
}

window.storage = new Storage()



function capitalize(str) {
    if (!str) return '';
    return str.charAt(0).toUpperCase() + str.slice(1);
}

function genKey(){
    var reg = Math.floor(10 * Math.random()).toString()

    reg += Math.floor(10 * Math.random())
    reg += Math.floor(10 * Math.random())
    reg += Math.floor(10 * Math.random())
    reg += Math.floor(10 * Math.random())
    reg += Math.floor(10 * Math.random())
    reg += Math.floor(10 * Math.random())

    return reg
}

function isArray(item){
    return Array.isArray(item)
}

function concat(...array){
    var string = '';

    for (let i = 0; i < array.length; i++) {
        string += array[i]
    }

    return string
}

function CopyText(text){
    var dummy = document.createElement('input');
    dummy.type = 'text'
    dummy.value = text
    dummy.style = "position: absolute; left: -1000px; top: -1000px";

    document.body.appendChild(dummy);


    if (navigator.userAgent.match(/ipad|ipod|iphone/i)) {
        dummy.contentEditable = true;
        dummy.readOnly = true;

        var range = document.createRange();
        range.selectNodeContents(dummy);

        var selection = window.getSelection();

        selection.removeAllRanges();

        selection.addRange(range);

        el.setSelectionRange(0, 999999);

    }else {
        dummy.select();
    }

    document.execCommand("copy");

    document.body.removeChild(dummy);
    OpenSm('Copiado com sucesso!', 'success');
}

function swInstall(){
    if(navigator.serviceWorker){
        navigator.serviceWorker.register('/sw.cache.js')
    }
}

function unsubmit(){
    var buttons = document.querySelectorAll('button')
    buttons.forEach(function(button){
        button.type = "button"
    })
}

function onloads(){
    var loads = pit('[data-load]').all()
    loads.forEach(function(item){
        var dataLoad = item.attr('data-load')
        var [ prop ] = dataLoad.split('/')
        var url = dataLoad.replace(prop, '')
        var extention = url.split('.').pop();
        var path = url.replace('.' + extention, '')

        var uri = concat(path, '?type=.', extention)
        console.log(uri)
        item.attr(prop, uri)
    })
}

function Table() {
    this.table = document.querySelector('table tbody');
}

Table.prototype.addRow = function(rowData) {
    if (!this.table) {
        return;
    }

    var newRow = this.table.insertRow();
    rowData.forEach(function(data) {
        var newCell = newRow.insertCell();
        newCell.innerHTML = data;
    });
};

Table.prototype.removeRows = function(indices) {
    if (!this.table) {
        return;
    }

    var rowCount = this.table.rows.length;
    indices = indices.map(function(index) {
        return parseInt(index);
    });

    indices.sort(function(a, b) {
        return b - a;
    });

    indices.forEach(function(index) {
        if (index >= 0 && index < rowCount) {
            this.table.deleteRow(index);
        } 
    }, this);
};

Table.prototype.toExcel = function(...excludeColumns) {
    var wb = XLSX.utils.book_new();
    var ws_data = [];
    var rows = this.table.rows;

    // Adiciona cabeçalhos
    var headers = [];
    var headerCells = document.querySelectorAll('table thead tr th');
    headerCells.forEach(function(cell, index) {
        if (!excludeColumns.includes(index)) {
            headers.push(cell.innerText);
        }
    });
    ws_data.push(headers);

    // Adiciona linhas
    for (var i = 0; i < rows.length; i++) {
        var row = rows[i];
        var cells = row.cells;
        var rowData = [];
        for (var j = 0; j < cells.length; j++) {
            if (!excludeColumns.includes(j)) {
                // Para pegar o texto ou o valor de entrada, dependendo da célula
                var cellValue = cells[j].querySelector('input') ? cells[j].querySelector('input').checked : cells[j].innerText;
                rowData.push(cellValue);
            }
        }
        ws_data.push(rowData);
    }

    var ws = XLSX.utils.aoa_to_sheet(ws_data);
    XLSX.utils.book_append_sheet(wb, ws, "Sheet1");
    XLSX.writeFile(wb, 'Tabela.xlsx');    
};

function toExcel() {
    var table = new Table();
    table.toExcel(0);
}


function getToken(){
    return storage.get('token') ? storage.get('token') : ''
}

function parseJwt(token){
    var base64Url = token.split('.')[1];
    var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    var jsonPayload = decodeURIComponent(window.atob(base64).split('').map(function(c) {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
    }).join(''));

    return JSON.parse(jsonPayload);
}

function getHead(){
    return {
        'x-secsenv-auth': window.AUTH,
        'x-secsenv-token': getToken()
    }
}

function TokenDestory(){
    storage.set('token', '')
    session.set('auth', '')

    location.reload()
}




function reload(){
	location.reload()
}

function to(a){
	location.href = a
}

function getParams(url) {
    var params = url.split('?')[1]
    if (!params) {
        return {}
    }

    var paramsArray = params.split('&')
    var paramsJSON = {};

    for (const param of paramsArray) {
        const [chave, valor] = param.split('=')
        paramsJSON[chave] = valor
    }

    return paramsJSON
}





function UserObtain(){
    var token = getToken()
    if(!token){
        return {}
    }

    return parseJwt(token)
}




function Donwload(uri, name){
    var link = document.createElement("a");

    link.setAttribute('download', name);
    link.href = uri;
    document.body.appendChild(link);
    link.click();
    link.remove();
}

function compare(v1, v2){
    return v1 == v2
}
